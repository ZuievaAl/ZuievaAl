2 / true
const capitalizeString = str => str.toUpperCase();
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
const getRandomIndex = array => Math.floor(Math.random() * array.length);
grape

const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);

const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
if (getRandomBoolean()) { console.log("True"); } else { console.log("False"); }
const removeDuplicates = array => Array.from(new Set(array));
true - 60,89,39,17,90,6,37,92,42,6,76,56,6,9,89,60,46,3,46,71,96,96,14,76,15,67,73,80,76,64,98,84,76
const findSmallestNumber = numbers => Math.min(...numbers);
17 - banana
const getUniqueValues = array => [...new Set(array)];
let array = getRandomArray(); array.forEach(item => console.log(item));
true - grape

const shuffleArray = array => array.sort(() => Math.random() - 0.5);
console.log(getRandomString());
banana + 55,37,83,23,44,36,85,31,93,70,7,19,14,47,71,64,8,71,1,30,25,24,74,19,21,13,14,45,6,45,83,91,17,76,65,95,24,7,81,16,73,50,5,24,77,65,43,79,25,29,87,21,76,43,71,66,81,33,92,33,60,81,91,92,11,22,21,35,37,23,36,16,71,3,35,1,37,34,30,76,96,86,33,8,13,83,3,79,41,41,17,14,0,54,59

const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };
false / 38,79,29,24,15,74,72,9,82,18,91,27,81,38,9
const fetchData = async url => { const response = await fetch(url); return response.json(); }

const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
true + 96
// This is a comment

orange + 31,68,72,78,79,18,12,48,45,29,93

for (let i = 0; i < getRandomNumber(); i++) { console.log(getRandomString()); }

banana

const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));

true + 
const randomNumber = getRandomNumber();

true - 89
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const variableName = getRandomNumber();

70 + 48,77,32,80,79,19,34,20,92,77,33,15,33,58,92,50,74,21,72,22,23,93,82,5,72,85,77,4,79,11,59,26,74,94,75,56,4,47,28
// This is a comment
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
let array = getRandomArray(); array.forEach(item => console.log(item));

banana / apple
const randomNumber = getRandomNumber();
const squareRoot = num => Math.sqrt(num);

const countOccurrences = (array, value) => array.reduce((count, current) => (current === value ? count + 1 : count), 0);
apple

const reverseWords = str => str.split(" ").reverse().join(" ");

const multiply = (a, b) => a * b;

31,38,57,34,9,37,3,92,94,44,31,97,4,10,82,34,7,28,97,94,88,0,62,35,51,14,70,59,20,66,70,47,26,69,14,59,39,83,29,49,97,94,89,5,22,36,24,13,44,19,43,45,17,36,24,34,79,52,27,73,35,48,54,92,93,88 + 28
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
true / apple
class MyClass { constructor() { this.property = getRandomString(); } }
const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
22 + 88
const randomNumber = getRandomNumber();
82 * 43,38,21,17,6,73,31,40,47,64,42,77,0,75,29,40,5,91,47,27,22
// This is a comment
apple

const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
let result = performOperation(getRandomNumber(), getRandomNumber());
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
banana


const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };

const findSmallestNumber = numbers => Math.min(...numbers);
grape - false
const findSmallestNumber = numbers => Math.min(...numbers);
50 + 59
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };

const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };

const getRandomSubset = (array, size) => array.slice(0, size);
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));

const deepClone = obj => JSON.parse(JSON.stringify(obj));

const getRandomSubset = (array, size) => array.slice(0, size);
const greet = name => `Hello, ${name}!`;
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
